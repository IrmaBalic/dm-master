c
result[:z]
result
@z
c
z
@z
c
result
c
result
c
result
c
result
c
result
c
model.val_i(1,1,1)
model.final_result
model
c
model.solve_problem
model.final_result
c
model.final_result
model
c
model.get_result
model
c
model.get_result
c
model.z[@n-1][0]
model.get_result
model.z
model
c
result
c
model.get_result
model
model.get_result
c
model
c
model
c
model
c
model
c
@n.to_i
@n
c
@n
@s_limit
@b
@a
c
@b
@a
@f
@k
c
params["y"]
params
c
params
c
z_result
c
x
s + y[i] - x
z[i][s]
z[i]
z_i
c
z_i
c
z_i
z_i = z[i][s]
z_i
z_ii
z[i][s]
z[i]
x_i
x
s
c
z
z_result
c
z_i
c
xs[n-1]
xs
z_result
z_resuly
xs[n-1][0][0]
xs[n-1][0][1]
xs[n-1][0][1],
z[i]
z[i][s]
s
c
xs_result
z_result
c
b = [8, 8, 9, 0]
val = s_temp*b[i]
    val = s_i * b[i]
i-1
x_temp
s_temp
current_val
 c
z
xs
c
x_dlimit
x_temp
val_i(i, x_temp, s_temp)
s_temp
s_temo
x_temp
i-1
current_val
z
z_val = current_val + z[i-1][s_prev]
x_prev = xs[i-1][s_prev].first
xs[i-1][s_prev]
s_prev
x_temp
c
x_temp
x_tem
s_temp
s_prev
xs[i-1][s_prev]
c
xs[i-1][s_prev]
xs[i-1]
xs
s_temp_i
s_temp
i-1
i
[ s_limit[i-1], s_n + y[i..n].sum ].min
s_prev
x_prev_hlimit
x_prev_dlimit
m
c
x_prev
c
x_prev
m
c
x_prev.between?(x_prev_dlimit, x_prev_hlimit)
m
s_temp
x_prev
c
xs_result
z_result
c
z_result
xs_result
c
xs_result
z_result
c
z_result
xs_result
c
xs_result
z_result
c
z_result
xs_result
c
xs_result
z_result
c
z_result
xs_result
c
xs_result
z_result
c
z_result
xs_result
c
xs_result
z_result
c
x
s
z_result = [], xs_result = []
z_result
xs
z
c
xs[i][s][0]
xs[i][s]
i=3
s = s + y[i] - x
s = xs[i][s][1]
x = xs[i][s][0]
s = xs[i][s][1]x = xs[i][s][0]
x = xs[i][s][0]
i=4
xs[i-1][s][0]
xs[i-1][s]
xs[i-1]
xs[i]
s = xs[i][s][1]
x = xs[i][s][0]
i=5
i = 5
s = 0
z.size
xs.size
xs
z
c
y[i]
 s_prev = s + y[i] - x
x = 0
s = xs.last.first.first
xs.last.first
xs.last
xs
z.last
z
c
xs[2]
xs[5]
xs[4]
xs[3]
xs[1]
xs[2]
xs[3]
xs
exit
c
x_prev = xs[i-1][s_prev].first
y[i]
s_prev
x_temp
s_temp
s
xs[i-1][s_prev]
s_prev
xs[i-1]
